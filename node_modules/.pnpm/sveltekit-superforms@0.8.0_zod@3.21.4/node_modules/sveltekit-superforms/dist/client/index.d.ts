import { type MaybePromise, type SubmitFunction } from '$app/forms';
import type { ActionResult } from '@sveltejs/kit';
import type { Page } from '@sveltejs/kit';
import { type Readable, type Writable, type Updater } from 'svelte/store';
import { type TaintedFields, type Validation, type Validators, type FieldPath, type UnwrapEffects, type ZodValidation } from '../index.js';
import type { z, AnyZodObject, ZodEffects } from 'zod';
import type { FormFields } from '../index.js';
import type { Entity } from '../server/entity.js';
export { jsonProxy, intProxy, numberProxy, booleanProxy, dateProxy, fieldProxy, formFieldProxy } from './proxies.js';
export { superValidate, actionResult, message, setMessage, setError, defaultData } from '../validate.js';
type FormUpdate = (result: Exclude<ActionResult, {
    type: 'error';
}>, untaint?: boolean) => Promise<void>;
export type FormOptions<T extends ZodValidation<AnyZodObject>, M> = Partial<{
    id: string;
    applyAction: boolean;
    invalidateAll: boolean;
    resetForm: boolean | (() => MaybePromise<boolean>);
    scrollToError: 'auto' | 'smooth' | 'off';
    autoFocusOnError: boolean | 'detect';
    errorSelector: string;
    selectErrorText: boolean;
    stickyNavbar: string;
    taintedMessage: string | false | null;
    SPA: true | {
        failStatus?: number;
    };
    onSubmit: (...params: Parameters<SubmitFunction>) => MaybePromise<unknown | void>;
    onResult: (event: {
        result: ActionResult;
        formEl: HTMLFormElement;
        cancel: () => void;
    }) => MaybePromise<unknown | void>;
    onUpdate: (event: {
        form: Validation<UnwrapEffects<T>, M>;
        cancel: () => void;
    }) => MaybePromise<unknown | void>;
    onUpdated: (event: {
        form: Readonly<Validation<UnwrapEffects<T>, M>>;
    }) => MaybePromise<unknown | void>;
    onError: 'apply' | ((event: {
        result: {
            type: 'error';
            status?: number;
            error: App.Error;
        };
        message: Writable<Validation<UnwrapEffects<T>, M>['message']>;
    }) => MaybePromise<unknown | void>);
    dataType: 'form' | 'json';
    validators: false | Validators<UnwrapEffects<T>> | T | ZodEffects<T> | ZodEffects<ZodEffects<T>> | ZodEffects<ZodEffects<ZodEffects<T>>> | ZodEffects<ZodEffects<ZodEffects<ZodEffects<T>>>> | ZodEffects<ZodEffects<ZodEffects<ZodEffects<ZodEffects<T>>>>>;
    validationMethod: 'auto' | 'oninput' | 'onblur' | 'submit-only';
    defaultValidator: 'keep' | 'clear';
    clearOnSubmit: 'errors' | 'message' | 'errors-and-message' | 'none';
    delayMs: number;
    timeoutMs: number;
    multipleSubmits: 'prevent' | 'allow' | 'abort';
    syncFlashMessage?: boolean;
    flashMessage: {
        module: {
            getFlash(page: Readable<Page>): Writable<App.PageData['flash']>;
            updateFlash(page: Readable<Page>, update?: () => Promise<void>): Promise<void>;
        };
        onError?: (event: {
            result: {
                type: 'error';
                status?: number;
                error: App.Error;
            };
            message: Writable<App.PageData['flash']>;
        }) => MaybePromise<unknown | void>;
        cookiePath?: string;
        cookieName?: string;
    };
}>;
type SuperFormSnapshot<T extends AnyZodObject, M = any> = Validation<T, M> & {
    tainted: TaintedFields<T> | undefined;
};
type SuperFormEvents<T extends AnyZodObject, M> = Pick<FormOptions<T, M>, 'onError' | 'onResult' | 'onSubmit' | 'onUpdate' | 'onUpdated'>;
type SuperFormEventList<T extends AnyZodObject, M> = {
    [Property in keyof SuperFormEvents<T, M>]-?: NonNullable<SuperFormEvents<T, M>[Property]>[];
};
type TaintOption = boolean | 'untaint' | 'untaint-all';
type ValidateOptions<V> = Partial<{
    value: V;
    update: boolean | 'errors' | 'value';
    taint: TaintOption;
    errors: string | string[];
}>;
type Validate<T extends AnyZodObject, P extends FieldPath<z.infer<T>>, // = FieldPath<z.infer<T>>,
Path extends keyof z.infer<T> | P> = (path: Path, opts?: ValidateOptions<unknown>) => Promise<string[] | undefined>;
export type SuperForm<T extends ZodValidation<AnyZodObject>, M = any> = {
    form: {
        subscribe: Readable<z.infer<T>>['subscribe'];
        set(this: void, value: z.infer<T>, options?: {
            taint?: TaintOption;
        }): void;
        update(this: void, updater: Updater<z.infer<T>>, options?: {
            taint?: TaintOption;
        }): void;
    };
    formId: Writable<string | undefined>;
    errors: Writable<Validation<T, M>['errors']>;
    constraints: Writable<Validation<T, M>['constraints']>;
    message: Writable<Validation<T, M>['message']>;
    tainted: Writable<TaintedFields<UnwrapEffects<T>> | undefined>;
    meta: Readable<Validation<T, M>['meta']>;
    valid: Readable<boolean>;
    empty: Readable<boolean>;
    submitting: Readable<boolean>;
    delayed: Readable<boolean>;
    timeout: Readable<boolean>;
    fields: FormFields<UnwrapEffects<T>>;
    firstError: Readable<{
        path: string[];
        message: string;
    } | null>;
    allErrors: Readable<{
        path: string[];
        message: string;
    }[]>;
    options: FormOptions<T, M>;
    enhance: (el: HTMLFormElement, events?: SuperFormEvents<UnwrapEffects<T>, M>) => ReturnType<typeof formEnhance>;
    reset: (options?: {
        keepMessage: boolean;
    }) => void;
    capture: () => SuperFormSnapshot<UnwrapEffects<T>, M>;
    restore: (snapshot: SuperFormSnapshot<UnwrapEffects<T>, M>) => void;
    validate: Validate<UnwrapEffects<T>, FieldPath<z.infer<UnwrapEffects<T>>>, keyof z.infer<UnwrapEffects<T>> | FieldPath<z.infer<UnwrapEffects<T>>>>;
};
/**
 * @deprecated Use SuperForm instead.
 */
export type EnhancedForm<T extends AnyZodObject, M = any> = SuperForm<T, M>;
/**
 * Initializes a SvelteKit form, for convenient handling of values, errors and sumbitting data.
 * @param {Validation} form Usually data.form from PageData.
 * @param {FormOptions} options Configuration for the form.
 * @returns {SuperForm} An object with properties for the form.
 */
export declare function superForm<T extends ZodValidation<AnyZodObject> = ZodValidation<AnyZodObject>, M = any>(form: z.infer<UnwrapEffects<T>> | Validation<UnwrapEffects<T>, M> | null | undefined | string, options?: FormOptions<UnwrapEffects<T>, M>): SuperForm<UnwrapEffects<T>, M>;
/**
 * Custom use:enhance version. Flash message support, friendly error messages, for usage with initializeForm.
 * @param formEl Form element from the use:formEnhance default parameter.
 */
declare function formEnhance<T extends AnyZodObject, M>(formEl: HTMLFormElement, submitting: Writable<boolean>, delayed: Writable<boolean>, timeout: Writable<boolean>, errs: Writable<unknown>, Data_update: FormUpdate, options: FormOptions<T, M>, data: Writable<z.infer<T>>, message: Writable<M | undefined>, enableTaintedForm: () => void, formEvents: SuperFormEventList<T, M>, id: Readable<string | undefined>, meta: Readable<Entity<T>['meta'] | undefined>, constraints: Readable<Entity<T>['constraints']>, tainted: Writable<TaintedFields<T> | undefined>, lastChanges: Writable<string[][]>): {
    destroy(): void;
};
