import { type RequestEvent } from '@sveltejs/kit';
import { type FieldPath, type Validation, type ZodValidation, type UnwrapEffects } from './index.js';
import { z, type AnyZodObject } from 'zod';
export { defaultData } from './schemaEntity.js';
export declare function message<T extends UnwrapEffects<AnyZodObject>, M>(form: Validation<T, M>, message: M, options?: {
    status?: number;
    valid?: boolean;
}): import("@sveltejs/kit").ActionFailure<{
    form: Validation<T, M>;
}> | {
    form: Validation<T, M>;
};
export declare const setMessage: typeof message;
export declare function setError<T extends UnwrapEffects<AnyZodObject>>(form: Validation<T, unknown>, path: keyof z.infer<T> | FieldPath<z.infer<T>> | [] | null, error: string | string[], options?: {
    overwrite?: boolean;
    status?: number;
}): import("@sveltejs/kit").ActionFailure<{
    form: Validation<T, unknown>;
}>;
export type SuperValidateOptions = {
    /**
     * @deprecated Use errors instead.
     */
    noErrors?: boolean;
    errors?: boolean;
    includeMeta?: boolean;
    id?: true | string;
};
export declare function superValidate<T extends ZodValidation<AnyZodObject>, M = any>(schema: T, options?: SuperValidateOptions): Promise<Validation<UnwrapEffects<T>, M>>;
export declare function superValidate<T extends ZodValidation<AnyZodObject>, M = any>(data: RequestEvent | Request | FormData | URLSearchParams | URL | Partial<z.infer<UnwrapEffects<T>>> | null | undefined, schema: T, options?: SuperValidateOptions): Promise<Validation<UnwrapEffects<T>, M>>;
export declare function actionResult<T extends Record<string, unknown> | App.Error | string, Type extends T extends string ? 'redirect' | 'error' : 'success' | 'failure' | 'error'>(type: Type, data?: T, options?: number | {
    status?: number;
    message?: Type extends 'redirect' ? App.PageData['flash'] : never;
}): Response;
