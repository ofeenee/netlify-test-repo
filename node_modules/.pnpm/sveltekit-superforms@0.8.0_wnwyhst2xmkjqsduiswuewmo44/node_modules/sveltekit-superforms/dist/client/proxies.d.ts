import { type Writable } from 'svelte/store';
import { type FormPath, type FieldPath, type InputConstraint, type UnwrapEffects } from '../index.js';
import type { SuperForm } from './index.js';
import type { z, AnyZodObject } from 'zod';
type DefaultOptions = {
    trueStringValue: string;
    dateFormat: 'date' | 'datetime' | 'time' | 'date-utc' | 'datetime-utc' | 'time-utc' | 'date-local' | 'datetime-local' | 'time-local' | 'iso';
};
type NormalizeFormPath<T, Path> = Path extends keyof T ? FormPath<T, [Path]> : FormPath<T, Path>;
export declare function intProxy<T extends Record<string, unknown>, Path extends keyof T | FieldPath<T>>(form: Writable<T>, path: Path): NormalizeFormPath<T, Path> extends number ? Writable<string> : never;
export declare function booleanProxy<T extends Record<string, unknown>, Path extends keyof T | FieldPath<T>>(form: Writable<T>, path: Path, options?: Pick<DefaultOptions, 'trueStringValue'>): Writable<string>;
export declare function numberProxy<T extends Record<string, unknown>, Path extends keyof T | FieldPath<T>>(form: Writable<T>, path: Path): Writable<string>;
export declare function dateProxy<T extends Record<string, unknown>, Path extends keyof T | FieldPath<T>>(form: Writable<T>, path: Path, options?: {
    format: DefaultOptions['dateFormat'];
}): Writable<string>;
export declare function jsonProxy<K, T extends Record<string, unknown>, Field extends keyof T, S = T[Field] extends string ? T[Field] : never>(form: Writable<T>, field: Field): Writable<S extends never ? never : K>;
export type FieldProxy<T extends AnyZodObject, Path extends keyof z.infer<T> | FieldPath<z.infer<T>>> = {
    readonly path: FieldPath<z.infer<T>>;
    value: Writable<FormPath<z.infer<T>, Path>>;
    errors?: Writable<string[] | undefined>;
    constraints?: Writable<InputConstraint | undefined>;
};
type NormalizePath<T extends object, Path extends keyof T | FieldPath<T>> = Path extends keyof T ? [Path] : Exclude<Path, keyof T>;
export declare function formFieldProxy<T extends AnyZodObject, P extends FieldPath<z.infer<T>>, Path extends keyof z.infer<T> | P>(form: SuperForm<UnwrapEffects<T>, unknown>, path: Path): {
    path: NormalizePath<z.TypeOf<T>, Path>;
    value: Writable<FormPath<z.TypeOf<UnwrapEffects<T>>, NormalizePath<z.TypeOf<UnwrapEffects<T>>, NormalizePath<z.TypeOf<T>, Path>>>>;
    errors: Writable<string[] | undefined>;
    constraints: Writable<Partial<{
        pattern: string;
        min: string | number;
        max: string | number;
        required: boolean;
        step: number;
        minlength: number;
        maxlength: number;
    }> | undefined>;
};
export declare function fieldProxy<T extends object, P extends FieldPath<T>, Path extends keyof T | P>(form: Writable<T>, path: Path): Writable<FormPath<T, NormalizePath<T, Path>>>;
export {};
