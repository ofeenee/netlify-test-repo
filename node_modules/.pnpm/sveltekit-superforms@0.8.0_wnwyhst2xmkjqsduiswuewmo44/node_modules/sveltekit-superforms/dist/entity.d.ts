import type { ValidationErrors, FieldPath } from './index.js';
import type { ZodTypeAny, AnyZodObject, ZodFormattedError } from 'zod';
import type { MaybePromise } from '$app/forms';
export type ZodTypeInfo = {
    zodType: ZodTypeAny;
    isNullable: boolean;
    isOptional: boolean;
    hasDefault: boolean;
    defaultValue: unknown;
};
export declare function mapErrors<T extends AnyZodObject>(obj: ZodFormattedError<unknown>, top?: boolean): ValidationErrors<T>;
export declare function findErrors(errors: ValidationErrors<AnyZodObject>, path?: string[]): {
    path: string[];
    message: string;
}[];
type PathData = {
    parent: any;
    key: string;
    value: any;
};
type FullPathData = PathData & {
    path: string[];
    isLeaf: boolean;
};
export declare function traversePathAsync<T extends object>(obj: T, path: FieldPath<T>, modifier?: (data: PathData) => MaybePromise<undefined | unknown | void>): Promise<PathData | undefined>;
export declare function pathExists<T extends object>(obj: T, path: string[], value?: (value: unknown) => boolean): PathData | undefined;
export declare function traversePath<T extends object>(obj: T, path: FieldPath<T>, modifier?: (data: PathData) => undefined | unknown | void): PathData | undefined;
type TraverseStatus = 'abort' | 'skip' | unknown | void;
export declare function traversePaths<T extends object, Path extends FieldPath<T>>(parent: T, modifier: (data: FullPathData) => TraverseStatus, path?: Path | []): TraverseStatus;
export declare function traversePathsAsync<T extends object, Path extends FieldPath<T>>(parent: T, modifier: (data: FullPathData) => MaybePromise<TraverseStatus>, path?: Path | []): Promise<TraverseStatus>;
/**
 * Compare two objects and return the differences as paths.
 */
export declare function comparePaths(newObj: unknown, oldObj: unknown): string[][];
export declare function setPaths(obj: Record<string, unknown>, paths: string[][], value: unknown): void;
export {};
